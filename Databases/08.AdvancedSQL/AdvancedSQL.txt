## 05. Advanced SQL
### _Homework_

1.	Write a SQL query to find the names and salaries of the employees that take the minimal salary in the company.
	*	Use a nested `SELECT` statement.

USE TelerikAcademy

SELECT FirstName + ' ' + LastName AS FullName, Salary
FROM Employees
WHERE Salary = (SELECT MIN(Salary) FROM Employees)

1.	Write a SQL query to find the names and salaries of the employees that have a salary that is up to 10% higher than the minimal salary for the company.

USE TelerikAcademy

SELECT FirstName, LastName, Salary
FROM Employees 
WHERE Salary BETWEEN
	(SELECT MIN(Salary) FROM Employees )
	AND (SELECT 1.1 * MIN(Salary) FROM Employees)

-----------------------------------------------------------------

USE TelerikAcademy

SELECT FirstName, LastName, Salary
FROM Employees 
WHERE Salary < 
 (SELECT 1.1 * MIN(Salary) FROM Employees)


1.	Write a SQL query to find the full name, salary and department of the employees that take the minimal salary in their department.
	*	Use a nested `SELECT` statement.

USE TelerikAcademy

SELECT e.FirstName + ' ' + e.LastName AS [Full Name], d.Name, e.Salary
FROM Employees e
JOIN Departments d
ON d.DepartmentID = e.DepartmentID
WHERE Salary =
 (SELECT MIN(Salary) FROM Employees emp
WHERE e.DepartmentID = emp.DepartmentID)
ORDER BY d.Name


1.	Write a SQL query to find the average salary in the department #1.

USE TelerikAcademy

SELECT AVG(Salary)
FROM Employees
WHERE DepartmentID = 1

1.	Write a SQL query to find the average salary  in the "Sales" department.

USE TelerikAcademy

USE TelerikAcademy

SELECT AVG(Salary) AS [Average Salary]
FROM Employees e
JOIN Departments d
ON e.DepartmentID = d.DepartmentID
WHERE d.Name = 'Sales'

1.	Write a SQL query to find the number of employees in the "Sales" department.

USE TelerikAcademy

SELECT COUNT(*)
FROM Employees e
JOIN Departments d
ON e.DepartmentID = d.DepartmentID
WHERE d.Name = 'Sales'

1.	Write a SQL query to find the number of all employees that have manager.

USE TelerikAcademy

SELECT COUNT(*) AS [Employees With Manager]
FROM Employees
WHERE ManagerID IS NOT NULL

---------------------------------------------------------------------------

SELECT COUNT(ManagerID) AS [Employees Without Manager]
FROM Employees



1.	Write a SQL query to find the number of all employees that have no manager.

USE TelerikAcademy

SELECT COUNT(*) AS [Employees Without Manager]
FROM Employees
WHERE ManagerID IS NULL

1.	Write a SQL query to find all departments and the average salary for each of them.

USE TelerikAcademy

SELECT d.Name AS [Department Name], AVG(e.Salary) AS [Average Salary]
FROM Departments d
JOIN Employees e
ON e.DepartmentID = d.DepartmentID
GROUP BY d.Name
ORDER BY [Average Salary]


1.	Write a SQL query to find the count of all employees in each department and for each town.

USE TelerikAcademy

SELECT d.Name AS [Department Name], t.Name AS [Town Name], COUNT(e.FirstName) AS [Number of Employees]
FROM Employees e
JOIN Departments d
ON e.DepartmentID = d.DepartmentID
JOIN Addresses a 
ON e.AddressID = a.AddressID
JOIN Towns t
ON a.TownID = t.TownID
GROUP BY d.Name, t.Name
ORDER BY [Department Name]


1.	Write a SQL query to find all managers that have exactly 5 employees. Display their first name and last name.

USE TelerikAcademy

SELECT m.FirstName, m.LastName
FROM Employees m
JOIN Employees e
ON e.ManagerID = m.EmployeeID
GROUP BY m.FirstName, m.LastName
HAVING COUNT(*) = 5



1.	Write a SQL query to find all employees along with their managers. For employees that do not have manager display the value "(no manager)".

USE TelerikAcademy

SELECT e.FirstName + ' ' + e.LastName AS [Employee Name], ISNULL(m.FirstName, 'no') + ' ' + ISNULL(m.LastName, 'manager') AS [Manager Name]
FROM Employees e
LEFT OUTER JOIN Employees m
ON e.ManagerID = m.EmployeeID


1.	Write a SQL query to find the names of all employees whose last name is exactly 5 characters long. Use the built-in `LEN(str)` function.

USE TelerikAcademy

SELECT e.FirstName + ' ' + e.LastName AS [Employee Name]
FROM Employees e
WHERE LEN(e.LastName) = 5

1.	Write a SQL query to display the current date and time in the following format "`day.month.year hour:minutes:seconds:milliseconds`".
        *Search in Google to find how to format dates in SQL Server.

SELECT CONVERT(varchar, GETDATE(), 104) + ' ' + CONVERT(varchar, GETDATE(), 114)
	
1.	Write a SQL statement to create a table `Users`. Users should have username, password, full name and last login time.
	*	Choose appropriate data types for the table fields. Define a primary key column with a primary key constraint.
	*	Define the primary key column as identity to facilitate inserting records.
	*	Define unique constraint to avoid repeating usernames.
	*	Define a check constraint to ensure the password is at least 5 characters long.

USE TelerikAcademy

CREATE TABLE Users
(
	[Id] INT NOT NULL IDENTITY PRIMARY KEY,
	[Username] VARCHAR(30) NOT NULL UNIQUE,
	[Password] NVARCHAR(40) NOT NULL,
	[Full Name] NVARCHAR(40) NOT NULL,
	[Last Login] DATETIME NOT NULL,
	CONSTRAINT [Password] CHECK (LEN(Password) >= 5)
)
GO

1.	Write a SQL statement to create a view that displays the users from the `Users` table that have been in the system today.
	*	Test if the view works correctly.

USE TelerikAcademy
SELECT * 
FROM [logged today]

--CREATE VIEW [Logged today] AS
--SELECT *
--FROM Users
--WHERE CONVERT(date, [Last Login]) = CONVERT(DATE, GETDATE())
--GO


1.	Write a SQL statement to create a table `Groups`. Groups should have unique name (use unique constraint).
	*	Define primary key and identity column.

USE TelerikAcademy

CREATE Table Groups
(
	[Id] INT IDENTITY NOT NULL PRIMARY KEY,
	[Name] NVARCHAR(50) NOT NULL UNIQUE
)
GO


1.	Write a SQL statement to add a column `GroupID` to the table `Users`.
	*	Fill some data in this new column and as well in the `Groups table.
	*	Write a SQL statement to add a foreign key constraint between tables `Users` and `Groups` tables.

USE TelerikAcademy

ALTER TABLE [Users]
ADD GroupId INT
GO

ALTER TABLE [Users]
ADD CONSTRAINT FK_Users_Groups
FOREIGN KEY (GroupId)
REFERENCES Groups(Id)
GO

1.	Write SQL statements to insert several records in the `Users` and `Groups` tables.

USE TelerikAcademy

INSERT INTO Groups
VALUES
('FirstGroup'),
('SecondGroup'),
('ThirdGroup'),
('FourthGroup')
GO

INSERT INTO Users
VALUES
('Name1', '12345', 'Some Name1', GETDATE(), 2),
('Name2', '12345', 'Some Name1', GETDATE(), 3),
('Name3', '12345', 'Some Name1', GETDATE(), 4),
('Name4', '12345', 'Some Name1', GETDATE(), 5),
('Name5', '12345', 'Some Name1', GETDATE(), 2),
('Name6', '12345', 'Some Name1', GETDATE(), 3),
('Name7', '12345', 'Some Name1', GETDATE(), 4)
GO


1.	Write SQL statements to update some of the records in the `Users` and `Groups` tables.

USE TelerikAcademy

UPDATE Users
SET Username = 'New Name1', Password = '23456'
WHERE Username = 'Name1'

UPDATE Groups
SET Name = 'Last Group'
WHERE Name = '1'



1.	Write SQL statements to delete some of the records from the `Users` and `Groups` tables.

USE TelerikAcademy

DELETE FROM Users
WHERE GroupId = 2

DELETE FROM Groups
WHERE Id = 2

1.	Write SQL statements to insert in the `Users` table the names of all employees from the `Employees` table.
	*	Combine the first and last names as a full name.
	*	For username use the first letter of the first name + the last name (in lowercase).
	*	Use the same for the password, and `NULL` for last login time.

USE TelerikAcademy

INSERT INTO Users
([Full Name], [Username], [Password], [Last Login])
SELECT FirstName + ' ' + LastName, LOWER(LEFT(FirstName, 1)) + LOWER(LastName) + LEFT(CONVERT(VARCHAR, HireDate), 1), LOWER(LEFT(FirstName, 1)) + LOWER(LastName) + 'pass', GETDATE() 
FROM Employees


1.	Write a SQL statement that changes the password to `NULL` for all users that have not been in the system since 10.03.2010.

USE TelerikAcademy

ALTER TABLE Users
ALTER COLUMN [Password] NVARCHAR(50) NULL

UPDATE Users
SET Password = NULL
WHERE DATEDIFF(DAY, [Last Login], '03.10.2010 00:00:00:000') > 0


1.	Write a SQL statement that deletes all users without passwords (`NULL` password).

USE TelerikAcademy

DELETE 
FROM Users
WHERE Password IS NULL

1.	Write a SQL query to display the average employee salary by department and job title.

USE TelerikAcademy

SELECT AVG(Salary) AS [Average Salary], d.Name, e.JobTitle
FROM Employees e
JOIN Departments d
ON e.DepartmentID = d.DepartmentID
GROUP BY d.Name, e.JobTitle

1.	Write a SQL query to display the minimal employee salary by department and job title along with the name of some of the employees that take it.

USE TelerikAcademy

SELECT e.Firstname, e.LastName, AVG(e.Salary) AS [Average Salary], d.Name, e.JobTitle
FROM Employees e
JOIN Departments d
ON e.DepartmentID = d.DepartmentID
GROUP BY d.Name, e.JobTitle, e.FirstName, e.LastName
ORDER BY d.Name

1.	Write a SQL query to display the town where maximal number of employees work.

SELECT TOP 1 t.Name AS Town, COUNT(*) AS EmployeesCount
FROM Employees e
	JOIN Addresses a
		ON e.AddressID = a.AddressID
	JOIN Towns t
		ON a.TownID = t.TownID
GROUP BY t.Name
ORDER BY EmployeesCount DESC

1.	Write a SQL query to display the number of managers from each town.

USE TelerikAcademy

SELECT COUNT(DISTINCT m.ManagerID) AS [Manager Count], t.Name
FROM Employees m
JOIN Addresses a
ON m.AddressID = a.AddressID
JOIN Towns t
ON t.TownID = a.TownID
GROUP BY t.Name
ORDER BY [Manager Count]


1.	Write a SQL to create table `WorkHours` to store work reports for each employee (employee id, date, task, hours, comments).
	*	Don't forget to define  identity, primary key and appropriate foreign key. 
	*	Issue few SQL statements to insert, update and delete of some data in the table.
	*	Define a table `WorkHoursLogs` to track all changes in the `WorkHours` table with triggers.
		*	For each change keep the old record data, the new record data and the command (insert / update / delete).



1.	Start a database transaction, delete all employees from the '`Sales`' department along with all dependent records from the pother tables.
	*	At the end rollback the transaction.
1.	Start a database transaction and drop the table `EmployeesProjects`.
	*	Now how you could restore back the lost table data?
1.	Find how to use temporary tables in SQL Server.
	*	Using temporary tables backup all records from `EmployeesProjects` and restore them back after dropping and re-creating the table.